---
- id: format-shell
  name: format-shell
  description: "Format the project's shell scripts."
  entry: --entrypoint=shfmt --env=FORCE_COLOR=1 ghcr.io/cicd-tools-org/cicd-tools:main
  args:
    - "-w"
    - "--indent=2"
    - "-ci"
    - "-sr"
  exclude: "^\\.cicd-tools/boxes/.+$"
  files: "^.+\\.(bash|sh)$"
  language: docker_image
  pass_filenames: true
  stages: [commit]
- id: format-toml
  name: format-toml
  description: "Format the project's TOML files."
  entry: --entrypoint=tomll --env=FORCE_COLOR=1 ghcr.io/cicd-tools-org/cicd-tools:main
  files: "^.+\\.toml$"
  language: docker_image
  pass_filenames: true
  stages: [commit]
- id: gettext-translations-add
  name: "gettext-translations-add"
  description: "Add new languages to the project folder structure for gettext."
  entry: ./.cicd-tools/boxes/bootstrap/pre-commit/gettext-translations.sh add -i "ghcr.io/cicd-tools-org/cicd-tools-gettext:latest"
  language: system
  pass_filenames: false
  always_run: true
  require_serial: true
  stages: [manual]
- id: gettext-translations-compile
  name: "gettext-translations-compile"
  description: "Compile gettext '.po' files into '.mo' files for distribution."
  entry: ./.cicd-tools/boxes/bootstrap/pre-commit/gettext-translations.sh compile -i "ghcr.io/cicd-tools-org/cicd-tools-gettext:latest"
  language: system
  pass_filenames: false
  always_run: true
  require_serial: true
  stages: [manual]
- id: gettext-translations-missing
  description: "Check all gettext '.po' files for untranslated strings."
  name: "gettext-translations-missing"
  entry: ./.cicd-tools/boxes/bootstrap/pre-commit/gettext-translations.sh missing -i "ghcr.io/cicd-tools-org/cicd-tools-gettext:latest"
  files: "^.+\\.py$"
  language: system
  pass_filenames: false
  always_run: true
  require_serial: true
  stages: [commit]
- id: gettext-translations-update
  name: "gettext-translations-update"
  description: "Extract translatable strings from the code base with gettext and regenerate '.pot' and '.po' files."
  entry: ./.cicd-tools/boxes/bootstrap/pre-commit/gettext-translations.sh update -i "ghcr.io/cicd-tools-org/cicd-tools-gettext:latest"
  files: "^.+\\.py$"
  language: system
  pass_filenames: false
  always_run: true
  require_serial: true
  stages: [commit]
- id: git-conflict-markers
  name: "git-conflict-markers"
  entry: git
  args:
    - --no-pager
    - diff
    - --cached
    - --check
  language: system
  stages: [commit]
- id: lint-ansible
  name: lint-ansible
  description: "Check the collection or role for Ansible best practices."
  entry: ./.cicd-tools/boxes/bootstrap/pre-commit/lint-ansible.sh
  files: "^.+\\.(yaml|yml)$|^.ansible-lint$"
  language: system
  pass_filenames: false
  stages: [commit]
- id: lint-dockerfile
  name: lint-dockerfile
  description: "Lint the project's Dockerfiles."
  entry: --entrypoint=hadolint ghcr.io/cicd-tools-org/cicd-tools:main
  types: ["dockerfile"]
  language: docker_image
  stages: [commit]
- id: lint-github-workflow
  name: lint-github-workflow
  description: "Lint the project's GitHub workflow files."
  entry: --entrypoint=actionlint ghcr.io/cicd-tools-org/cicd-tools:main
  args:
    - "-color"
    - "-config-file"
    - ".cicd-tools/configuration/actionlint.yaml"
  files: "^.github/workflows/.+\\.(yaml|yml)$"
  language: docker_image
  pass_filenames: false
  stages: [commit]
- id: lint-github-workflow-header
  name: lint-github-workflow-header
  description: "Lint the headers of the project's GitHub workflow files."
  entry: ./.cicd-tools/boxes/bootstrap/pre-commit/lint-github-workflow-header.sh
  files: "^.github/workflows/.+\\.(yaml|yml)$"
  language: system
  pass_filenames: true
  stages: [commit]
- id: lint-markdown
  name: lint-markdown
  description: "Lint the Markdown files."
  files: "^.+\\.md$"
  entry: ghcr.io/igorshubovych/markdownlint-cli:v0.35.0@sha256:22cf4699a448a7bbc311a940e0600019423d7671cbedae9c35cd32b51f560350
  args:
    - "-c"
    - ".markdownlint.yml"
  language: docker_image
  pass_filenames: true
  stages: [commit]
- id: lint-shell
  name: lint-shell
  description: "Lint the project's shell scripts."
  entry: --entrypoint=shellcheck ghcr.io/cicd-tools-org/cicd-tools:main
  args:
    - "--color=always"
    - "--source-path=SCRIPTDIR"
    - "--exclude=SC2317"
    - "-x"
  exclude: "^\\.cicd-tools/boxes/.+$"
  files: "^.+\\.(bash|sh)$"
  language: docker_image
  pass_filenames: true
  stages: [commit]
- id: security-credentials
  name: security-credentials
  description: "Scan codebase for checked in credentials."
  entry: trufflesecurity/trufflehog:3.63.2@sha256:16c1cf07b7142037a2859d4ad0f51c40603e7e58703ddb8bd80cf40e6af51f44
  args:
    - "git"
    - "file://."
    - "--fail"
    - "--no-update"
    - "--debug"
    - "--max-depth=500"
  language: docker_image
  pass_filenames: false
  stages: [commit]
- id: spelling-commit-message
  name: spelling-commit-message
  description: "Check the spelling on the commit message."
  entry: ./.cicd-tools/boxes/bootstrap/pre-commit/spelling-commit-message.sh
  args:
    - "ghcr.io/cicd-tools-org/cicd-tools:main"
  language: system
  pass_filenames: true
  require_serial: true
  always_run: true
  stages: [commit-msg]
- id: spelling-markdown
  name: spelling-markdown
  description: "Spellcheck the Markdown files."
  entry: --entrypoint=vale ghcr.io/cicd-tools-org/cicd-tools:main
  files: "^.+\\.md$|^.vale/Vocab/\\.+$"
  language: docker_image
  pass_filenames: true
  stages: [commit]
- id: spelling-vale-sync
  name: spelling-vale-sync
  description: "Download any required vale packages."
  entry: --mount type=tmpfs,destination=/tmp --entrypoint=vale ghcr.io/cicd-tools-org/cicd-tools:main
  args:
    - "sync"
  language: docker_image
  always_run: true
  pass_filenames: false
  stages: [manual]
- id: spelling-vale-vocab
  name: "spelling-vale-vocab"
  entry: sh -c 'for FILE in "$@"; do sort -u -o ${FILE} ${FILE}; done' --
  files: "^.vale/Vocab/.+/(accept|reject)\\.txt$"
  language: system
  stages: [commit]
- id: poetry-lint-ansible
  # Add ansible-lint to your poetry environment to use this hook.
  name: poetry-lint-ansible
  description: "Check the collection or role for Ansible best practices using ansible-lint from the local poetry environment."
  entry: ./.cicd-tools/boxes/bootstrap/pre-commit/lint-ansible.sh
  language: system
  files: "^.+\\.(yaml|yml)$|^.ansible-lint$"
  pass_filenames: false
  stages: [commit]
- id: poetry-lint-python
  # Add pylint to your poetry environment to use this hook.
  name: "poetry-lint-python"
  description: "Lint the project's Python files using pylint from the local poetry environment."
  entry: poetry run pylint
  language: system
  files: "^.+\\.py$"
  stages: [commit]
- id: poetry-types-python
  # Add mypy to your poetry environment to use this hook.
  name: "types-python"
  description: "Type check the project's Python files using mypy from the local poetry environment."
  entry: poetry run mypy
  args:
    - "--strict"
    - "--show-error-codes"
    - "--implicit-reexport"
    - "--explicit-package-bases"
  language: system
  files: "^.+\\.pyi?$"
  stages: [commit]
  require_serial: true
